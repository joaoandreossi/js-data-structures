const SinglyLinkedList = require('./SinglyLinkedList')
const Node = require('./Node')

test('append() should insert the value in the last position', () => {
    const list = new SinglyLinkedList()
    list.append(new Node(1))
    list.append(new Node(2))
    list.append(new Node(3))
    expect(list.getFirst()).toBe(1)
    expect(list.getLast()).toBe(3)
})

test('prepend() should insert the value in the first position', () => {
    const list = new SinglyLinkedList()
    list.prepend(new Node(1))
    list.prepend(new Node(2))
    list.prepend(new Node(3))
    expect(list.getFirst()).toBe(3)
    expect(list.getLast()).toBe(1)
})

test('insert() should insert the value at the specified index', () => {
    const list = new SinglyLinkedList()
    list.append(new Node(1))
    list.append(new Node(2))
    list.append(new Node(3))
    expect(list.get(0)).toBe(1)
    list.insert(0, new Node(0))
    expect(list.get(0)).toBe(0)
    list.insert(4, new Node(4))
    expect(list.get(4)).toBe(4)
    expect(() => list.insert(10, new Node(10))).toThrow()
    list.insert(4, new Node(10))
    expect(list.get(4)).toBe(10)
})

test('deleteFirst() should remove the first element from the list', () => {
    const list = new SinglyLinkedList()
    list.append(new Node(1))
    list.append(new Node(2))
    list.append(new Node(3))
    list.deleteFirst()
    expect(list.get(0)).toBe(2)
})

test('deleteLast() should remove the last element from the list', () => {
    const list = new SinglyLinkedList()
    list.append(new Node(1))
    list.deleteLast()
    expect(list.getLast()).toBe(undefined)
    list.append(new Node(1))
    list.append(new Node(2))
    list.deleteLast()
    expect(list.getLast()).toBe(1)
})

test('delete() should remove the element at the passed index', () => {
    const list = new SinglyLinkedList()
    list.append(new Node(1))
    list.delete(0)
    expect(list.getFirst()).toBe(undefined)
    list.append(new Node(1))
    list.append(new Node(2))
    list.delete(0)
    expect(list.get(0)).toBe(2)
    list.insert(0, new Node(1))
    list.insert(0, new Node(0))
    list.append(new Node(3))
    list.append(new Node(4))
    list.delete(3)
    expect(list.get(3)).toBe(4)
})

test('contains() should correctly indicate the presence of the passed value', () => {
    const list = new SinglyLinkedList()
    list.append(new Node(1))
    list.append(new Node(2))
    list.append(new Node(3))
    expect(list.contains(2)).toBe(true)
    expect(list.contains(5)).toBe(false)
})

test('get() should return the value at the passed index', () => {
    const list = new SinglyLinkedList()
    list.append(new Node(1))
    list.append(new Node(2))
    list.append(new Node(3))
    expect(list.get(0)).toBe(1)
    expect(list.get(1)).toBe(2)
    expect(list.get(2)).toBe(3)
    expect(() => list.get(5)).toThrow()
})

test('update() should change the value of the element at the passed index', () => {
    const list = new SinglyLinkedList()
    expect(() => list.update(0, 10)).toThrow()
    list.append(new Node(1))
    list.append(new Node(2))
    list.append(new Node(3))
    list.update(2, 10)
    expect(list.get(2)).toBe(10)
})

test('toArray() should return an array representation of the list', () => {
    const list = new SinglyLinkedList()
    list.append(new Node(1))
    list.append(new Node(2))
    list.append(new Node(3))
    list.append(new Node(4))
    list.append(new Node(5))
    expect(list.toArray()).toMatchObject([1, 2, 3, 4, 5])
})

test('invert() should reverse the connection between the nodes', () => {
    const list = new SinglyLinkedList()
    list.append(new Node(1))
    list.append(new Node(2))
    list.append(new Node(3))
    list.append(new Node(4))
    list.append(new Node(5))
    expect(list.getFirst()).toBe(1)
    expect(list.getLast()).toBe(5)
    list.invert()
    expect(list.getFirst()).toBe(5)
    expect(list.getLast()).toBe(1)
})